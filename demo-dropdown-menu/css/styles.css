body {
    font-family: 'Roboto Condensed', sans-serif;
    font-size: 1.125rem; /* 18px */
}

.inner-container {
    width: 64rem; /* 1024px */
    margin: 0 auto;
}

.flex-container{
    display: flex;
    align-items: flex-start;
}

/* https://webaim.org/techniques/css/invisiblecontent/ */
/* display: none; or visibility: hidden; will both hide the element and the text will be ignored by screen readers. This visibility hidden class will hide the text visually but not from screen readers. This can be used for hiding h1 text when using a logo in place of the h1. */
.visually-hidden {
    clip: rect(1px, 1px, 1px, 1px);
    clip-path: inset(50%);
    height: 1px;
    width: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
}

/* **************** header *************** */
header {
    background-image: linear-gradient(0deg, rgba(68,51,122,1) 0%, rgba(107,70,1936,1));
}

header .logo {
    margin: 0.625rem; /** 10px **/
}


/* **************** nav *************** */
/* Step 1: style nav li and a as normal. */
/* Text styling goes on the anchor element to overwrite browser styles. Spacing and layout goes on the li elements. */
.menu li a, .btn {
    color: #faf5ff;
    text-decoration: none;
    text-transform: uppercase;
    /**expand the clickable area to the entire li vs just the text**/
    display: block;
}

.menu li {
    padding: 0 1rem;
    /** make the line-height the same as the nav height to vertically center the text **/
    line-height: 4.375rem; /**70px**/
    white-space: nowrap; /** forces the text inside the li to stay on one line and not wrap **/      
    position: relative;     
}

.menu > li:hover {
    background-color: #805ad5;
}

/**move the last link over to the far right and style it to look like a button**/
.btn {
    /**when the spacing between flex items is not equal, you can use margin-left or margin-right auto to move all the available space
    in the row to the left or the right of that item**/
    margin-left: auto;
    border: 1px solid #faf5ff;
    padding: 0.5rem;
    margin-top: 0.625rem; /**10px**/
    border-radius: 4px;
}

.btn:hover {
    background-color: #faf5ff;
    color: #805ad5;
    transition: all 0.3s ease-in-out;
}

/* Step 2: position and hide the dropdown menu */
.dropdown {
    position: absolute;
    background-image: linear-gradient(0deg, rgba(68,51,122,1) 0%, rgba(107,70,1936,1));
    left: 0;
    opacity: 0;
    visibility: hidden;
}

.dropdown li {
    border-bottom: 1px solid rgba(237,242,247,0.4);
    line-height: 2.8125rem;
}

/**position the 2nd tier**/
/**move the arrow image beside the text, overwrite the display block on the 'a'
element above (.menu li a)**/

.menu li a.arrow-icon {
    display: flex;
    align-items: center;
}

/**targeting the second tier**/
.dropdown ul {
    top: 0;
    left: 100%;
}

/* Step 3: add hover state that shows the dropdown menu */
.menu li:hover > ul {
    visibility: visible;
    opacity: 1;
}

/**different hover states for the stacking list items**/
/**when adding borders, or any styling elements/properties as hover effects add them to 
both the default state and the hover state to avoid the jumpiness/moving effect**/
.dropdown > li {
    padding: 0 1rem 0 0.75rem;
    border-left: 0.25rem solid rgb(107,70,193);
}

.dropdown > li:hover {
    border-left: 0.25rem solid #d6bcfa;
}

/* Step 4: add transition to remove the clunkiness effect. Delaying the hover effect makes this more usable when accidentally moving your cursor off the menu. */
.dropdown {
    transition: all 0.5s ease;
}

/* Step 5: add accessibility with the :focus-within state on the li's which will target the anchor tags inside*/
/* Test the tab navigation by tabbing through the webpage content */
/* https://webaim.org/techniques/keyboard/ */

.menu li:focus-within > ul,
.menu li > ul:focus {
    visibility: visible;
    opacity: 1;
    display: block;
}


/* Now tab through the content after adding this step */
